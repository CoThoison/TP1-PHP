/* Generated By:JavaCC: Do not edit this line. PHPDefaultVisitor.java Version 7.0.14 */
public class PHPBranchCountVisitor implements PHPVisitor {

    private int numberBranch = 1;

    public void defaultVisit(SimpleNode node, int branchAdd) {
        if (node.value != null) {
            if (node.value.getName().equalsIgnoreCase("mysql_query")
                    || node.value.getName().equalsIgnoreCase("mysqli_query")
                    || node.value.getName().equalsIgnoreCase("execute")
                    || node.value.getName().equalsIgnoreCase("exec")) {
                System.out.println("---------------------------------------------------------------------------------");
                System.out.println("DETECTED : " + node.value.getName());
                System.out.println("---------------------------------------------------------------------------------");
            }
        }
        node.childrenAccept(this, 0);
    }

    public void visit(SimpleNode node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTPhpPage node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTHtmlBlock node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTThrowStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTTryBlock node, int branchAdd) {
        this.numberBranch++;
        defaultVisit(node, 0);
    }

    public void visit(ASTEndOfStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTEmbeddedHtml node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTDefineStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    //Cas CASE, on enl√®ve 1 pour le SWITCH
    public void visit(ASTLabeledStatement node, int branchAdd) {
        this.numberBranch = this.numberBranch + branchAdd;
        defaultVisit(node, 0);
    }

    public void visit(ASTExpressionStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTCompoundStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    //Cas SWITCH et IF
    public void visit(ASTSelectionStatement node, int branchAdd) {
        this.numberBranch++;
        this.numberBranch = this.numberBranch + branchAdd;
        defaultVisit(node, 0);
    }

    public void visit(ASTIterationStatement node, int branchAdd) {
        this.numberBranch++;
        defaultVisit(node, 0);
    }

    public void visit(ASTJumpStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTParameterList node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTParameter node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTClassDeclaration node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTClassMembers node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTMemberDeclaration node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTInterfaceDeclaration node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTInterfaceMembers node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTInterfaceMember node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTIncludeStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTEchoStatement node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTLogicalTextOrExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTLogicalTextXorExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTLogicalTextAndExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTAssignmentExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTAssignmentOperator node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTConditionalExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTLogical_Or_Expression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTLogical_And_Expression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTBitwiseOrExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTBitwiseXorExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTBitwiseAndExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTEqualityExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTRelationalExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTShiftExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTAdditiveExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTMultiplicativeExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTCastExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTUnaryExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTPrefixIncDecExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTPostfixIncDecExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTInstanceOfExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTPostfixExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTPrimaryExpression node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTArray node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTClassInstantiation node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTVariable node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTArgumentExpressionList node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTConstant node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTString node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTDoubleStringLiteral node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public void visit(ASTVisibility node, int branchAdd) {
        defaultVisit(node, 0);
    }

    public int getNumberBranch() {
        return this.numberBranch;
    }

}

/* JavaCC - OriginalChecksum=b87b84be8facda8d221e342450f9a9a1 (do not edit this line) */
